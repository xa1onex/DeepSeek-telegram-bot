import json
import pytz
import aiohttp
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.constants import ChatAction
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = '7595932493:AAG7hrJckODArPCX8I2ZZyPj-602xqRPS2c'
API_KEY = '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'
API_URL = 'https://openrouter.ai/api/v1/chat/completions'
MODELS = ['deepseek/deepseek-chat', 'deepseek/deepseek-r1']
current_model = MODELS[0]

# –õ–∏–º–∏—Ç—ã
MAX_TOKENS_PER_DAY = 1000  # 10 000 —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–µ–Ω—å

# –ë–î –≤ JSON
DB_FILE = "database.json"

# –ê–¥–º–∏–Ω ID (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
ADMIN_USER_ID = 5387020491


def load_db():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        with open(DB_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_db(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª"""
    with open(DB_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4)


# –ó–∞–≥—Ä—É–∑–∫–∞ –ë–î
db = load_db()


async def chat_with_model(user_id, messages):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤"""
    global db
    if db[user_id]["tokens"] <= 0:
        return "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!"

    async with aiohttp.ClientSession() as session:
        async with session.post(
                API_URL,
                headers={"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"},
                json={
                    "model": current_model,
                    "messages": messages[-5:],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    "max_tokens": min(db[user_id]["tokens"], 150),  # –ù–µ –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
                    "temperature": 0.6,
                }
        ) as response:
            if response.status != 200:
                return "–û—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            result = await response.json()
            answer = result.get("choices", [{}])[0].get("message", {}).get("content", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.")

            # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã (–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ 1 —Å–∏–º–≤–æ–ª = 1 —Ç–æ–∫–µ–Ω)
            tokens_used = len(answer.split()) * 1.5
            db[user_id]["tokens"] -= int(tokens_used)
            save_db(db)

            return answer


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = str(update.effective_chat.id)

    if user_id not in db:
        db[user_id] = {"tokens": MAX_TOKENS_PER_DAY}
        save_db(db)

    keyboard = [
        ["üí¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤"],
        ["üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "üÜò –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø DeepSeek AI –±–æ—Ç. –ß–µ–º –ø–æ–º–æ—á—å?", reply_markup=reply_markup)


async def show_tokens(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã"""
    user_id = str(update.effective_chat.id)
    tokens_left = db.get(user_id, {}).get("tokens", MAX_TOKENS_PER_DAY)
    await update.message.reply_text(f"üìä –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {tokens_left} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")


async def switch_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    global current_model
    current_model = MODELS[1] if current_model == MODELS[0] else MODELS[0]
    await update.message.reply_text(f"üîÑ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {current_model}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_chat.id)
    user_message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    if db[user_id]["tokens"] <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    asyncio.create_task(context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING))

    # –ó–∞–ø—Ä–æ—Å –∫ AI
    response = await chat_with_model(user_id, [{"role": "user", "content": user_message}])

    await update.message.reply_text(response)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞"""
    await update.message.reply_text(
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É\n"
        "üìä /tokens ‚Äî –£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å\n"
        "üîÑ /mode ‚Äî –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n"
        "üÜò /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "‚öôÔ∏è /admin ‚Äî –ê–¥–º–∏–Ω-–º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"
    )


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")


async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω-–º–µ–Ω—é –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_chat.id

    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–î –∫–∞–∫ —Ñ–∞–π–ª
    with open(DB_FILE, 'rb') as file:
        await update.message.reply_document(document=file, caption="üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")


def reset_tokens():
    """–°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global db
    for user_id in db.keys():
        db[user_id]["tokens"] = MAX_TOKENS_PER_DAY
    save_db(db)


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
scheduler = AsyncIOScheduler(timezone=pytz.timezone("Europe/Moscow"))
scheduler.add_job(reset_tokens, 'cron', hour=11, minute=0)
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('tokens', show_tokens))
app.add_handler(CommandHandler('mode', switch_model))
app.add_handler(CommandHandler('help', help_command))
app.add_handler(CommandHandler('admin', admin_menu))  # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(MessageHandler(filters.COMMAND, unknown_command))

app.run_polling()
